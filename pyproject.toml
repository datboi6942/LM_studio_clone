[tool.poetry]
name = "llm-cockpit"
version = "0.1.0"
description = "A powerful local LLM interface that runs GGUF/Safetensors models with advanced features"
authors = ["LLM Cockpit Team"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.0"
flask-socketio = "^5.3"
llama-cpp-python = {version = "^0.2", extras = ["server"]}
huggingface-hub = "^0.23"
structlog = "^24.0"
pynvml = "^11.5"
python-dotenv = "^1.0"
pyyaml = "^6.0"
python-socketio = {version = "^5.11", extras = ["client"]}
eventlet = "^0.35"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pytest-cov = "^5.0"
pytest-asyncio = "^0.23"
hypothesis = "^6.100"
mypy = "^1.10"
black = "^24.4"
ruff = "^0.4"
pdoc = "^14.5"
types-flask = "^1.1"
types-redis = "^4.6"
types-requests = "^2.32"

[tool.poetry.scripts]
llm-cockpit = "app.cli:main"
download-model = "download_model:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG001", "ARG002"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "llama_cpp",
    "vllm",
    "transformers",
    "sentence_transformers",
    "chromadb",
    "celery",
    "flask_socketio",
    "socketio",
    "eventlet",
    "pynvml",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=app --cov-branch --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
branch = true
source = ["app"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
